#include <iostream>
using namespace std;

class DynamicMatrix {
private:
    int** matrix;
    int rows;
    int cols;

    void allocate(int r, int c, int v = 0) {
        rows = r;
        cols = c;
        matrix = new int*[rows];
        for (int i = 0; i < rows; ++i) {
            matrix[i] = new int[cols];
            for (int j = 0; j < cols; ++j) {
                matrix[i][j] = v;
            }
        }
    }

    void deallocate() {
        for (int i = 0; i < rows; ++i) {
            delete[] matrix[i];
        }
        delete[] matrix;
    }

public:
    DynamicMatrix(int r, int c, int v=0) {
        allocate(r, c, v);
    }

    ~DynamicMatrix() {
        deallocate();
    }

    void resize(int newRows, int newCols, int v=0) {
        int** newMatrix = new int*[newRows];
        for (int i = 0; i < newRows; ++i) {
            newMatrix[i] = new int[newCols];
        }

        for (int i = 0; i < newRows; ++i) {
            for (int j = 0; j < newCols; ++j) {
                if (i < rows && j < cols) {
                    newMatrix[i][j] = matrix[i][j];
                } else {
                    newMatrix[i][j] = v;
                }
            }
        }

        deallocate();

        matrix = newMatrix;
        rows = newRows;
        cols = newCols;
    }

    void transpose() {
        int** transposed = new int*[cols];
        for (int i = 0; i < cols; ++i) {
            transposed[i] = new int[rows];
            for (int j = 0; j < rows; ++j) {
                transposed[i][j] = matrix[j][i];
            }
        }

        deallocate();

        matrix = transposed;
        int temp = rows;
        rows = cols;
        cols = temp;
    }

    void print() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                int val = matrix[i][j];
                if ((i + j) % 2 == 1) {
                    val += 2;
                }
                cout << val << " ";
            }
            cout << endl;
        }
    }
    
    void set(int r, int c, int val) {
        if (r >= 0 && r < rows && c >= 0 && c < cols) {
            matrix[r][c] = val;
        }
    }
};

int main() {
    DynamicMatrix m(3, 3, 1);

    cout << "Original matrix:" << endl;
    m.print();

    m.set(0, 1, 5);
    m.set(1, 2, 8);

    cout << "\nAfter changes:" << endl;
    m.print();

    m.resize(4, 5, 0);
    cout << "\nAfter resizing to 4x5:" << endl;
    m.print();

    m.transpose();
    cout << "\nAfter transpose:" << endl;
    m.print();

    return 0;
}
